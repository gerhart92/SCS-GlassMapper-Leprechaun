// Generates GlassMapper models

Log.Debug($"Emitting GlassMapper templates for {ConfigurationName}...");

Code.AppendLine($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Leprechaun tool.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

using System;   
using System.CodeDom.Compiler;
using System.Collections.Generic;   
using System.Linq;
using System.Text;
using Glass.Mapper.Sc.Configuration.Attributes;
using Glass.Mapper.Sc.Configuration;
using Glass.Mapper.Sc.Fields;
using Sitecore.Globalization;
using Sitecore.Data;
using Sitecore.Foundation.ORM.Models;

{RenderTemplates()}
");

public string RenderTemplates()
{
    var localCode = new System.Text.StringBuilder();

    foreach (var template in Templates)
    {
        localCode.AppendLine($@"
namespace {template.Namespace}
{{
	/// <summary>
	/// I{template.CodeName} interface generated based on sitecore item
	/// <para>Path: {template.Path}</para>	
	/// <para>ID: {template.Id}</para>	
	/// </summary>
	[SitecoreType(TemplateId = I{template.CodeName}Constants.TemplateIdString)]
	[GeneratedCode(""Leprechaun"", ""2.0.0.0"")]
	public partial interface I{template.CodeName} : {GetBaseInterfaces(template)}
	{{
		{RenderInterfaceFields(template)}
	}}
	
	public static partial class I{template.CodeName}Constants
	{{
		public const string TemplateIdString = ""{template.Id}"";
		public static readonly ID TemplateId = new ID(TemplateIdString);
		public const string TemplateName = ""{template.CodeName}"";
		{ RenderConstantFields(template) }
	}}
	
	/// <summary>
	/// {template.CodeName} class generated based on sitecore item	
	/// <para>Path: {template.Path}</para>	
	/// <para>ID: {template.Id}</para>	
	/// </summary>
	public partial class {template.CodeName} : {GetBaseClasses(template)}, I{template.CodeName}
	{{
		{RenderClassFields(template)}
	}}
}}");
    }

    return localCode.ToString();
}

public string GetBaseInterfaces(TemplateCodeGenerationMetadata template)
{
    var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

    foreach (var baseTemplate in template.BaseTemplates)
    {
        bases.Add($"global::{baseTemplate.Namespace}.I{baseTemplate.CodeName}");
    }

    if (bases.Count == 0)
    {
        // IStandardTemplateItem only needed when no other bases exist otherwise irrelevant by transitive inheritance
        bases.Add("IGlassBase");
    }

    return string.Join(", ", bases);
}

public string GetBaseClasses(TemplateCodeGenerationMetadata template)
{
    var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

    foreach (var baseTemplate in template.BaseTemplates)
    {
        bases.Add($"global::{baseTemplate.Namespace}.{baseTemplate.CodeName}");
    }

    if (bases.Count == 0)
    {
        // IStandardTemplateItem only needed when no other bases exist otherwise irrelevant by transitive inheritance
        bases.Add("GlassBase");
    }

    return string.Join(", ", bases);
}

public string RenderInterfaceFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        /// <summary>
		/// Represents {field.Name} field
		/// <para>Field Type: {field.Type}</para>	
		/// <para>ID: {field.Id}</para>	
		/// </summary>
        [SitecoreField(FieldName = I{template.CodeName}Constants.{field.CodeName}_FieldName)]
        {GetFieldType(field)} {field.CodeName} {{ get; set; }}");
    }

    return localCode.ToString();
}

public string RenderClassFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        /// <summary>
		/// Represents {field.Name} field
		/// <para>Path: {field.Path}</para>	
		/// <para>ID: {field.Id}</para>	
		/// </summary>
        [SitecoreField(FieldName = I{template.CodeName}Constants.{field.CodeName}_FieldName)]
        public virtual {GetFieldType(field)} {field.CodeName} {{ get; set; }}");
    }

    return localCode.ToString();
}

public string GetFieldType(TemplateFieldCodeGenerationMetadata field)
{
    switch (field.Type.ToLower())
    {
        case "tristate":
            return "TriState";
        case "checkbox":
            return "bool";

        case "date":
        case "datetime":
            return "DateTime";

        case "number":
            return "float";

        case "integer":
            return "int";

        case "treelist":
            return "IEnumerable<Guid>";
        case "treelistex":
        case "treelist descriptive":
        case "checklist":
        case "multilist":
            return "IEnumerable<Guid>";
        case "grouped droplink":
        case "droplink":
        case "lookup":
        case "droptree":
        case "reference":
        case "tree":
            return "Guid";

        case "file":
            return "File";

        case "image":
            return "Image";

        case "rich text":
        case "html":
            return "string";

        case "link":
            return "Link";

        case "general link":
            return "Link";

        case "single-line text":
        case "multi-line text":
        case "frame":
        case "text":
        case "memo":
        case "droplist":
        case "grouped droplist":
        case "valuelookup":
            return "string";
        default:
            return "string";
    }
}

// Generates Glass Constants File

public string RenderConstantFields(TemplateCodeGenerationMetadata template)
{
    if (template.OwnFields.Length == 0)
    {
        return string.Empty;
    }

    var localCode = new System.Text.StringBuilder();

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        public static readonly ID {field.CodeName} = new ID(""{field.Id}"");
        public const string {field.CodeName}_FieldName = ""{field.Name}"";");
    }

    return localCode.ToString();
}